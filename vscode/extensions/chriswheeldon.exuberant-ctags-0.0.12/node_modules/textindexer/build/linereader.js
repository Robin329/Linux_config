"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const events_1 = require("events");
const ringbuffer_1 = require("./ringbuffer");
class LineReader extends events_1.EventEmitter {
    constructor(rs) {
        super();
        this._buffer = new ringbuffer_1.RingBuffer(128 * 1024);
        const tmp = Buffer.alloc(128 * 1024);
        let offset = 0;
        rs.on("data", data => {
            if (this._buffer.write(data)) {
                while (true) {
                    const nl = this._buffer.indexOf("\n");
                    if (nl === -1) {
                        break;
                    }
                    this._buffer.read(tmp, nl + 1);
                    const end = nl > 0 && tmp[nl - 1] === "\r".charCodeAt(0) ? nl - 1 : nl;
                    if (end > 0) {
                        this.emit("line", {
                            value: tmp.toString(undefined, 0, end),
                            offset: offset
                        });
                    }
                    offset = offset + nl + 1;
                }
            }
        });
        rs.on("end", () => {
            const len = this._buffer.length();
            if (len) {
                this._buffer.read(tmp, len);
                this.emit("line", {
                    value: tmp.toString(undefined, 0, len),
                    offset: rs.bytesRead - len
                });
            }
            this.emit("close", rs.bytesRead);
        });
    }
}
exports.LineReader = LineReader;
//# sourceMappingURL=linereader.js.map