"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs = __importStar(require("fs"));
const index_1 = require("../index");
const linereader_1 = require("../linereader");
const perf_hooks_1 = require("perf_hooks");
const filename = process.argv[2];
const lookup = process.argv[3];
const ti = new index_1.TextIndexer(filename, line => {
    const ti = line.indexOf("\t");
    if (ti === -1) {
        return line.slice(0, ti);
    }
    return line;
}, 6);
const index_start_ms = perf_hooks_1.performance.now();
ti.index()
    .then((index) => __awaiter(this, void 0, void 0, function* () {
    console.log(`duration ${perf_hooks_1.performance.now() -
        index_start_ms}ms, heapUsed = ${process.memoryUsage().heapUsed / 1e6}mb`);
    const rename_start_ms = perf_hooks_1.performance.now();
    const result = yield ti.lookup(lookup);
    if (result) {
        const lr = new linereader_1.LineReader(fs.createReadStream(process.argv[2], {
            start: result.start,
            end: result.end - 1
        }));
        lr.on("line", line => {
            if (line.value.split("\t")[0] === lookup) {
                console.log(line.value);
            }
        });
        lr.on("close", () => {
            console.log(`duration ${perf_hooks_1.performance.now() - rename_start_ms}ms`);
        });
    }
    else {
        console.log(`${lookup} not found`);
    }
}))
    .catch(error => {
    console.log(error);
});
//# sourceMappingURL=ctags.js.map